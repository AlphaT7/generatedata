const fs = require('fs');

module.exports = function (grunt) {
	const dataTypesFolder = 'src/plugins/dataTypes';
	const exportTypesFolder = 'src/plugins/exportTypes';
	const locales = ['de', 'en', 'es', 'fr', 'ja', 'nl', 'ta', 'zh'];

	const generateI18nBundles = () => {
		locales.forEach((locale) => {
			const coreLocaleStrings = fs.readFileSync(`src/i18n/${locale}.json`);
			const dtImports = getDataTypeLocaleFilePaths(locale);
			const etImports = getExportTypeLocaleFilePaths(locale);

			generateLocaleFileTemplate(locale, coreLocaleStrings, dtImports, etImports);
		});
	};

	const getDataTypeLocaleFilePaths = (locale) => {
		const dataTypeFolders = fs.readdirSync(dataTypesFolder);
		const dtImports = {};
		dataTypeFolders.forEach((folder) => {
			const localeFile = `${dataTypesFolder}/${folder}/i18n/${locale}.json`;
			if (fs.existsSync(localeFile)) {
				dtImports[folder] = `const ${folder} = ${fs.readFileSync(localeFile, 'utf8').trim()};`;
			}
		});
		return dtImports;
	};

	const getExportTypeLocaleFilePaths = (locale) => {
		const exportTypeFolders = fs.readdirSync(exportTypesFolder);
		const etImports = {};
		exportTypeFolders.forEach((folder) => {
			const localeFile = `${exportTypesFolder}/${folder}/i18n/${locale}.json`;
			if (fs.existsSync(localeFile)) {
				etImports[folder] = `const ${folder} = ${fs.readFileSync(localeFile, 'utf8').trim()};`;
			}
		});
		return etImports;
	};

	// TODO potential bug here. DataType folders + ExportType folders may have collisions
	const generateLocaleFileTemplate = (locale, coreLocaleStrings, dtImports, etImports) => {
		const template = `
// DO NOT EDIT. This file is generated by a Grunt task.
// ----------------------------------------------------

(function() { 
const coreLocaleStrings = ${coreLocaleStrings};

${Object.values(dtImports).join('\n')}
${Object.values(etImports).join('\n')}

const i18n = {
	core: {
		...coreLocaleStrings
	},
	dataTypes: {
		${Object.keys(dtImports).join(',\n\t\t')}
	},
	exportTypes: {
		${Object.keys(etImports).join(',\n\t\t')}
	}
};

// load the locale info via an exposed global
window.gd.localeLoaded(i18n);
})();`;

		fs.writeFileSync(`./dist/${locale}.js`, template);
	};

	grunt.initConfig({
		cssmin: {
			options: {
				mergeIntoShorthands: false,
				roundingPrecision: -1
			},
			target: {
				files: {
					'dist/styles.css': [
						'src/resources/codemirror.css',
						'src/resources/ambience.css',
						'src/resources/cobalt.css',
						'src/resources/darcula.css',
						'src/resources/elegant.css',
						'src/resources/lucario.css'
					]
				}
			}
		},
		copy: {
			main: {
				files: [
					{
						expand: true,
						cwd: 'src/images',
						src: ['*'],
						dest: 'dist/images/'
					}
				],
			},
		},
	});

	grunt.loadNpmTasks('grunt-contrib-cssmin');
	grunt.loadNpmTasks('grunt-contrib-copy');
	grunt.registerTask('default', ['cssmin', 'copy', 'i18n']);
	grunt.registerTask('dev', ['default']);
	grunt.registerTask('i18n', generateI18nBundles);
};
